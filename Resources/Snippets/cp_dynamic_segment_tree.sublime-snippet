<snippet>
	<content>
<![CDATA[template<class S, class T> struct dynamic_segment_tree{
	S lb, rb;
	T val = 0;
	dynamic_segment_tree<S, T> *tl = nullptr, *tr = nullptr;
	dynamic_segment_tree<S, T>(S l, S r) : lb(l), rb(r) { }
	void extend(){
		if(!tl){
			S mid = lb + (rb - lb) / 2;
			tl = new dynamic_segment_tree<S, T>(lb, mid);
			tr = new dynamic_segment_tree<S, T>(mid + 1, rb);
		}
	}
	void update(S pos, T nval){
		if(lb == rb) val = nval;
		else{
			extend();
			S mid = lb + (rb - lb) / 2;
			if(pos <= mid) tl -> update(pos, nval);
			else tr -> update(pos, nval);
			val = (tl -> val) + (tr -> val);
		}
	}
	T query(S l, S r){
		if(l > r) return 0;
		else if(l == lb && r == rb) return val;
		else{
			extend();
			S mid = lb + (rb - lb) / 2;
			return (tl -> query(l, min(mid, r))) + (tr -> query(max(l, mid + 1), r));
		}
	}
};]]>	
	</content>
	<tabTrigger>cp_dynamic_segment_tree</tabTrigger>
	<description>Dynamic Segment Tree</description>
</snippet>