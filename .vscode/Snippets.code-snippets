{
	// Place your Competitive Programming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Template": {
		"prefix": ["cp_template"],
		"body": [
			"#pragma GCC optimize(\"unroll-loops, O3\")",
			"#pragma GCC target(\"avx\")",
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#define IO(i, o) freopen(i, \"r\", stdin), freopen(o, \"w\", stdout)",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"using ll = long long;",
			"using ld = long double;",
			"const int xx[8] = {-1, 0, 1, 0, -1, -1, 1, 1};",
			"const int yy[8] = {0, -1, 0, 1, -1, 1, -1, 1};",
			"",
			"int main(){",
			"\t//IO(\"input.txt\", \"output.txt\");",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(NULL), srand(time(NULL));",
			"\t",
			"\treturn 0;",
			"}"
		]
	},
	"Google Code Jam Template": {
		"prefix": ["cp_google_code_jam_template"],
		"body": [
			"#pragma GCC optimize(\"unroll-loops, O3\")",
			"#pragma GCC target(\"avx\")",
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#define IO(i, o) freopen(i, \"r\", stdin), freopen(o, \"w\", stdout)",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"using ll = long long;",
			"using ld = long double;",
			"const int xx[8] = {-1, 0, 1, 0, -1, -1, 1, 1};",
			"const int yy[8] = {0, -1, 0, 1, -1, 1, -1, 1};",
			"",
			"void solve(){",
			"\t",
			"}",
			"",
			"int main(){",
			"\t//IO(\"input.txt\", \"output.txt\");",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(NULL), srand(time(NULL));",
			"\tint t;",
			"\tcin >> t;",
			"\tfor(int i = 1; i <= t; i++){",
			"\t\tcout << \"Case #\" << i << \": \";",
        	"\t\tsolve();",
			"\t}",
			"\treturn 0;",
			"}"
		]
	}
	
}