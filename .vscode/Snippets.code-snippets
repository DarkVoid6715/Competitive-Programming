{
    "Template": {
        "prefix": "cp_template",
        "body": [
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "#define IO(i, o) freopen(i, \"r\", stdin), freopen(o, \"w\", stdout)\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "const int xx[8] = {-1, 0, 1, 0, -1, -1, 1, 1};\r",
            "const int yy[8] = {0, -1, 0, 1, -1, 1, -1, 1};\r",
            "\r",
            "int main(){\r",
            "    //IO(\"input.txt\", \"output.txt\");\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    \r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    },
    "Google Code Jam Template": {
        "prefix": "cp_google_code_jam_template",
        "body": [
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "#define IO(i, o) freopen(i, \"r\", stdin), freopen(o, \"w\", stdout)\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "const int xx[8] = {-1, 0, 1, 0, -1, -1, 1, 1};\r",
            "const int yy[8] = {0, -1, 0, 1, -1, 1, -1, 1};\r",
            "\r",
            "void solve(){\r",
            "\r",
            "}\r",
            "\r",
            "int main(){\r",
            "    //IO(\"input.txt\", \"output.txt\");\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    int t;\r",
            "    cin >> t;\r",
            "    for(int i = 1; i <= t; i++){\r",
            "        cout << \"Case #\" << i << \": \";\r",
            "        solve();\r",
            "    }\r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    },
	"Topological Sort": {
        "prefix": "cp_topological_sort",
        "body": [
            "struct topological_sort{\r",
            "    vector<vector<int>> adj;\r",
            "    vector<int> in;\r",
            "    void init(int n, vector<int> inp[]){\r",
            "        adj = vector<vector<int>>(n + 1, vector<int>());\r",
            "        for(int i = 1; i <= n; i++) adj[i] = inp[i];\r",
            "    }\r",
            "    void init(vector<vector<int>> inp){ adj = inp; }\r",
            "    vector<int> getSort(){\r",
            "        queue<int> que;\r",
            "        vector<int> ord;\r",
            "        in = vector<int>(adj.size());\r",
            "        for(int i = 1; i < (int)adj.size(); i++)\r",
            "            for(int j : adj[i]) in[j]++;\r",
            "        for(int i = 1; i < (int)adj.size(); i++)\r",
            "            if(!in[i]) que.push(i);\r",
            "        while(!que.empty()){\r",
            "            int vtx = que.front();\r",
            "            que.pop();\r",
            "            ord.push_back(vtx);\r",
            "            for(int i : adj[vtx])\r",
            "                if(--in[i] <= 0) que.push(i);\r",
            "        }\r",
            "        return ord;\r",
            "    }\r",
            "};"
        ],
        "description": ""
    }
}