{
    "Template": {
        "prefix": "cp_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    \r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    },
	"Google Code Jam Template": {
        "prefix": "cp_google_code_jam_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "\r",
            "void solve() {\r",
            "\r",
            "}\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    int t;\r",
            "    cin >> t;\r",
            "    for (int i = 1; i <= t; i++) {\r",
            "        cout << \"Case #\" << i << \": \";\r",
            "        solve();\r",
            "    }\r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    },
    "Constructive Tester Template": {
        "prefix": "cp_constructive_tester_template",
        "body": [
            "#pragma GCC optimize(\"unroll-loops, O3\")\r",
            "#include <bits/stdc++.h>\r",
            "#include <ext/pb_ds/tree_policy.hpp>\r",
            "#include <ext/pb_ds/assoc_container.hpp>\r",
            "using namespace std;\r",
            "using namespace __gnu_pbds;\r",
            "using ll = long long;\r",
            "using ld = long double;\r",
            "const int xx[8] = { -1, 0, 1, 0, -1, -1, 1, 1 };\r",
            "const int yy[8] = { 0, -1, 0, 1, -1, 1, -1, 1 };\r",
            "\r",
            "int main() {\r",
            "    ios_base::sync_with_stdio(false);\r",
            "    cin.tie(NULL), srand(time(NULL));\r",
            "    freopen(\"input.txt\", \"r\", stdin);\r",
            "    \r",
            "    freopen(\"code_output.txt\", \"r\", stdin);\r",
            "    \r",
            "    return 0;\r",
            "}"
        ],
        "description": ""
    },
    "Modular Arithmetic Class": {
        "prefix": "cp_modular_arithmetic",
        "body": [
            "struct modular_arithmetic {\r",
            "    const int mod = 1e9 + 7; //const int mod = 998244353;\r",
            "    int add(ll x, ll y) {\r",
            "        return ((x % mod + mod) % mod + (y % mod + mod) % mod) % mod;\r",
            "    }\r",
            "    int sub(ll x, ll y) {\r",
            "        return ((x % mod + mod) % mod - (y % mod + mod) % mod) % mod;\r",
            "    }\r",
            "    int mult(ll x, ll y) {\r",
            "        return (((x % mod + mod) % mod) * ((y % mod + mod) % mod)) % mod;\r",
            "    }\r",
            "    int pwr(ll x, ll y) {\r",
            "        if (!y) return 1 % mod;\r",
            "        ll ans = pwr(x, y / 2);\r",
            "        ans = (ans * ans) % mod;\r",
            "        if (y % 2) ans = (ans * (x % mod)) % mod;\r",
            "        return ans;\r",
            "    }\r",
            "    int inv(ll x) {\r",
            "        return pwr(x, mod - 2);\r",
            "    }\r",
            "    int div(ll x, ll y) {\r",
            "        return ((x % mod) * inv(y)) % mod;\r",
            "    }\r",
            "};\r",
            "modular_arithmetic mod;"
        ],
        "description": ""
    }
}